package com.ping.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gxb.gxswallet.db.converter.StringConverter;
import java.util.List;

import com.gxb.gxswallet.db.asset.AssetData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSET_DATA".
*/
public class AssetDataDao extends AbstractDao<AssetData, Long> {

    public static final String TABLENAME = "ASSET_DATA";

    /**
     * Properties of entity AssetData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property AssetId = new Property(2, String.class, "assetId", false, "ASSET_ID");
        public final static Property Nets = new Property(3, String.class, "nets", false, "NETS");
        public final static Property Prefix = new Property(4, String.class, "prefix", false, "PREFIX");
        public final static Property Enable = new Property(5, boolean.class, "enable", false, "ENABLE");
        public final static Property IsTest = new Property(6, boolean.class, "isTest", false, "IS_TEST");
    }

    private final StringConverter netsConverter = new StringConverter();

    public AssetDataDao(DaoConfig config) {
        super(config);
    }
    
    public AssetDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSET_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ASSET_ID\" TEXT," + // 2: assetId
                "\"NETS\" TEXT," + // 3: nets
                "\"PREFIX\" TEXT," + // 4: prefix
                "\"ENABLE\" INTEGER NOT NULL ," + // 5: enable
                "\"IS_TEST\" INTEGER NOT NULL );"); // 6: isTest
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSET_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindString(3, assetId);
        }
 
        List nets = entity.getNets();
        if (nets != null) {
            stmt.bindString(4, netsConverter.convertToDatabaseValue(nets));
        }
 
        String prefix = entity.getPrefix();
        if (prefix != null) {
            stmt.bindString(5, prefix);
        }
        stmt.bindLong(6, entity.getEnable() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsTest() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindString(3, assetId);
        }
 
        List nets = entity.getNets();
        if (nets != null) {
            stmt.bindString(4, netsConverter.convertToDatabaseValue(nets));
        }
 
        String prefix = entity.getPrefix();
        if (prefix != null) {
            stmt.bindString(5, prefix);
        }
        stmt.bindLong(6, entity.getEnable() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsTest() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetData readEntity(Cursor cursor, int offset) {
        AssetData entity = new AssetData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // assetId
            cursor.isNull(offset + 3) ? null : netsConverter.convertToEntityProperty(cursor.getString(offset + 3)), // nets
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // prefix
            cursor.getShort(offset + 5) != 0, // enable
            cursor.getShort(offset + 6) != 0 // isTest
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAssetId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNets(cursor.isNull(offset + 3) ? null : netsConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setPrefix(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnable(cursor.getShort(offset + 5) != 0);
        entity.setIsTest(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
